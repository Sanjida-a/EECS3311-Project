package testCases.Unit;

import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Arrays;

import org.junit.jupiter.api.Test;

import databaseDAO.MerchandiseRoot;
import databaseDAO.MerchandiseStub;
import middleLayer.Inventory;
import middleLayer.MERCHANDISE_FORM;
import middleLayer.MERCHANDISE_TYPE;
import middleLayer.Merchandise;


public class InventoryUnitTest {
	@Test
    void getInstanceTest() {
        Inventory subject1 = Inventory.getInstance();
        Inventory subject2 = Inventory.getInstance();
        assertTrue(subject1 == subject2);	//compares the address of subject1 and subject2
        									//should be same since Inventory is Singleton
    }

    @Test
    void getMerchandiseTest() {
        Inventory val = Inventory.getInstance();
        MerchandiseStub mStub = new MerchandiseStub();
        val.set_merDAO(mStub);
        
        assertEquals(val.getMerchandise(), mStub.allInventoryStub);
    }

    @Test
    void getOnlyOTCMerchandiseTest(){
        Inventory val = Inventory.getInstance();
        MerchandiseStub mStub = new MerchandiseStub();
        val.set_merDAO(mStub);
        ArrayList<Merchandise> subject1 = val.getOnlyOTCMerchandise();
		ArrayList<Merchandise> comparator1 = new ArrayList<Merchandise>();
		comparator1.add(mStub.getListOfMerchandise().get(0));
		comparator1.add(mStub.getListOfMerchandise().get(1));
		assertEquals(subject1, comparator1);
    }

    @Test
    void displayAlphabeticallyTest(){
    	/*	Merchandise-
    	 * 	int medicationID;
    	    String name;
    	    int quantity;
    	    double price;
    	    MERCHANDISE_TYPE type;
    	    MERCHANDISE_FORM form;
    	    boolean isOTC;
    	    String description;
    	    private boolean isValid;
    	 * 
    	 */
    	Inventory inv = Inventory.getInstance();
    	ArrayList<Merchandise> subject1 = new ArrayList<Merchandise>();
    	ArrayList<Merchandise> comparator1 = new ArrayList<Merchandise>();
    	Merchandise merc1 = new Merchandise(1, "A", 10, 10, MERCHANDISE_TYPE.COLD, MERCHANDISE_FORM.LIQUID, true, "", true);
    	Merchandise merc2 = new Merchandise(2, "B", 10, 10, MERCHANDISE_TYPE.COLD, MERCHANDISE_FORM.LIQUID, true, "", true);
    	Merchandise merc3 = new Merchandise(3, "C", 10, 10, MERCHANDISE_TYPE.COLD, MERCHANDISE_FORM.LIQUID, true, "", true);
    	Merchandise merc4 = new Merchandise(4, "D", 10, 10, MERCHANDISE_TYPE.COLD, MERCHANDISE_FORM.LIQUID, true, "", true);
    	
    	subject1.add(merc2);
    	subject1.add(merc3);
    	subject1.add(merc1);
    	subject1.add(merc4);
    	subject1 = inv.displayAlphabetically(subject1);
    	comparator1.add(merc1);
    	comparator1.add(merc2);
       	comparator1.add(merc3);
       	comparator1.add(merc4);
       	
       	assertEquals(subject1.toString(), comparator1.toString());
    	
    	
    }

    @Test
    void displayByQuantityTest(){
        Inventory inv = Inventory.getInstance();
        MerchandiseStub mStub = new MerchandiseStub();
        inv.set_merDAO(mStub);
        ArrayList<Merchandise> subject1 = new ArrayList<Merchandise>();
    	ArrayList<Merchandise> comparator1 = new ArrayList<Merchandise>();
    	Merchandise merc1 = new Merchandise(1, "A", 10, 10, MERCHANDISE_TYPE.COLD, MERCHANDISE_FORM.LIQUID, true, "", true);
    	Merchandise merc2 = new Merchandise(2, "B", 11, 10, MERCHANDISE_TYPE.COLD, MERCHANDISE_FORM.LIQUID, true, "", true);
    	Merchandise merc3 = new Merchandise(3, "C", 12, 10, MERCHANDISE_TYPE.COLD, MERCHANDISE_FORM.LIQUID, true, "", true);
    	Merchandise merc4 = new Merchandise(4, "D", 13, 10, MERCHANDISE_TYPE.COLD, MERCHANDISE_FORM.LIQUID, true, "", true);
    	
    	subject1.add(merc2);
    	subject1.add(merc3);
    	subject1.add(merc1);
    	subject1.add(merc4);
    	subject1 = inv.displayAlphabetically(subject1);
    	comparator1.add(merc1);
    	comparator1.add(merc2);
       	comparator1.add(merc3);
       	comparator1.add(merc4);
       	assertEquals(subject1.toString(), comparator1.toString());
        
    }

    @Test
    void byPrice(){
        Inventory val = Inventory.getInstance();
        MerchandiseStub mStub = new MerchandiseStub();
        val.set_merDAO(mStub);
        assertEquals("[ID: 1, Name: ADVIL, Quantity: 10, Price: 5.0, Type: COLD, Form: LIQUID, isOTC: true, Description: null\n" +
              //  ", ID: 2, Name: TYLENOL, Quantity: 5, Price: 8.0, Type: FEVER, Form: TABLET, isOTC: true, Description: null\n" +
                ", ID: 3, Name: ADVIL, Quantity: 10, Price: 5.0, Type: COLD, Form: TABLET, isOTC: true, Description: null\n" +
                ", ID: 4, Name: TYLENOL, Quantity: 10, Price: 5.0, Type: COLD, Form: LIQUID, isOTC: true, Description: null\n" +
                ", ID: 5, Name: PILL1, Quantity: 10, Price: 5.0, Type: COLD, Form: LIQUID, isOTC: false, Description: null\n" +
                ", ID: 6, Name: PILL2, Quantity: 10, Price: 5.0, Type: FEVER, Form: TABLET, isOTC: false, Description: null\n" +
                ", ID: 2, Name: TYLENOL, Quantity: 5, Price: 8.0, Type: FEVER, Form: TABLET, isOTC: true, Description: null\n" +
                "]",val.displayByPrice(val.getMerchandise()).toString());
    }

    @Test
    void increaseQuantityTest(){
        Inventory val = Inventory.getInstance();
        MerchandiseStub mStub = new MerchandiseStub();
        val.set_merDAO(mStub);
        assertTrue(val.increaseQuantity(1,10));
        assertFalse(val.increaseQuantity(5, 10));
        assertEquals(val.getMerchandise().get(0).toString(), new Merchandise(1, "pill1", 20, 5.99, MERCHANDISE_TYPE.COLD, MERCHANDISE_FORM.LIQUID, true, "", true).toString() );
        
    }

    @Test
    void decreaseQuantity(){ //need condition
        Inventory val = Inventory.getInstance();
        MerchandiseStub mStub = new MerchandiseStub();
        val.set_merDAO(mStub);
        boolean[] testCase = {true, true, true};
        assertEquals(Arrays.toString(testCase), Arrays.toString(val.decreaseQuantity(1,10)));
    }

    @Test
    void decreaseQuantity1(){ // by 7
        Inventory val = Inventory.getInstance();
        MerchandiseStub mStub = new MerchandiseStub();
        val.set_merDAO(mStub);
        boolean[] testCase = {true, true, true};
        assertEquals(Arrays.toString(testCase), Arrays.toString(val.decreaseQuantity(1,7)));
    }

    @Test
    void delete(){
        Inventory val = Inventory.getInstance();
        MerchandiseStub mStub = new MerchandiseStub();
        val.set_merDAO(mStub);
        assertEquals(true, val.delete(1));
    }

    @Test
    void addTo(){
        Inventory val = Inventory.getInstance();
        MerchandiseStub mStub = new MerchandiseStub();
        val.set_merDAO(mStub);
        Merchandise m = new Merchandise(7, "ASPIRIN", 10, 15.0, MERCHANDISE_TYPE.FEVER, MERCHANDISE_FORM.TABLET, true, null, true);
        assertEquals(true, val.addToInventory(m));
    }

    @Test
    void searchByID(){
        Inventory val = Inventory.getInstance();
        MerchandiseStub mStub = new MerchandiseStub();
        val.set_merDAO(mStub);
        Merchandise m = new Merchandise(5, "PILL1", 10, 5.0, MERCHANDISE_TYPE.COLD, MERCHANDISE_FORM.LIQUID,false, null, true);
        assertEquals(m.toString(), val.searchMerchandiseWithID(5).toString());
    }

    @Test
    void modifyPrice(){
        Inventory val = Inventory.getInstance();
        MerchandiseStub mStub = new MerchandiseStub();
        val.set_merDAO(mStub);
        assertEquals(true, val.modifyMedicationPrice(5,19.0));
    }
}
