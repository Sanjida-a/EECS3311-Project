package presentation;

import java.awt.Dimension;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JTextField;

import middleLayer.Inventory;
import middleLayer.Pharmacist;

import javax.swing.JButton;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;

public class DisplayModifyMerchandise implements ActionListener{
	private static JFrame superFrame;
	private static JFrame frame;
	private static JTextField textFieldName;
	private static JTextField textFieldType;
	private static JTextField textFieldForm;
	private static JTextField textFieldPrice;
	private static JTextField textFieldMercID;
	private static JTextArea textAreaDescription;
	
	public static void displayModifyMerchandise(JFrame previous) {
		superFrame = previous;
		superFrame.setEnabled(false);
		frame = new JFrame();
		JFrame.setDefaultLookAndFeelDecorated(true);
		frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		frame.setSize(new Dimension(700,400));
		DisplayModifyMerchandise.createContentsPanel(superFrame);
		
		frame.setVisible(true);
		
	}
	public static void createContentsPanel(JFrame superFrame) {
		frame.getContentPane().setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBounds(12, 10, 662, 443);
		frame.getContentPane().add(panel);
		panel.setLayout(null);
		
		createLabels(panel);
		createInputFields(panel);
		createButtons(panel);
		
		textAreaDescription = new JTextArea();
		textAreaDescription.setBounds(0, 135, 429, 193);
		panel.add(textAreaDescription);
		

		
		
	}
	
	public static void createLabels(JPanel panel) {
		
		JLabel lblMercID = new JLabel("MerchandiseID");
		lblMercID.setFont(new Font("굴림", Font.BOLD, 18));
		lblMercID.setBounds(0, 0, 145, 35);
		panel.add(lblMercID);
	}
	
	public static void createInputFields(JPanel panel) {
		textFieldName = new JTextField();
		textFieldName.setBounds(145, 45, 505, 35);
		panel.add(textFieldName);
		textFieldName.setColumns(10);
		
		/*textFieldType = new JTextField();
		textFieldType.setBounds(145, 162, 168, 35);
		panel.add(textFieldType);
		textFieldType.setColumns(10);
		
		textFieldForm = new JTextField();
		textFieldForm.setBounds(470, 116, 180, 35);
		panel.add(textFieldForm);
		textFieldForm.setColumns(10);*/
		
		textFieldPrice = new JTextField();
		textFieldPrice.setBounds(500, 91, 150, 35);
		panel.add(textFieldPrice);
		textFieldPrice.setColumns(10);
		
		textFieldMercID = new JTextField();
		textFieldMercID.setBounds(145, 0, 150, 35);
		panel.add(textFieldMercID);
		textFieldMercID.setColumns(10);
	}
	
	public static void createButtons(JPanel panel) {
		/*JButton btnOk = new JButton("Ok");
		btnOk.setFont(new Font("굴림", Font.BOLD, 20));
		btnOk.setBounds(460, 248, 190, 35);
		btnOk.addActionListener(new DisplayModifyMerchandise());
		panel.add(btnOk);*/
		
		JButton btnCancel = new JButton("Cancel");
		btnCancel.setFont(new Font("굴림", Font.BOLD, 20));
		btnCancel.setBounds(460, 293, 190, 35);
		btnCancel.addActionListener(new DisplayModifyMerchandise());
		panel.add(btnCancel);
		
		JButton btnChangeName = new JButton("Change name");
		btnChangeName.setHorizontalTextPosition(SwingConstants.LEFT);
		btnChangeName.setFont(new Font("굴림", Font.BOLD, 16));
		btnChangeName.setBounds(0, 45, 140, 35);
		panel.add(btnChangeName);
		
		JButton btnChangePrice = new JButton("Change Price");
		btnChangePrice.setFont(new Font("굴림", Font.BOLD, 16));
		btnChangePrice.setBounds(348, 90, 145, 35);
		panel.add(btnChangePrice);
		
		JButton btnChangeDescription = new JButton("Change Description");
		btnChangeDescription.setFont(new Font("굴림", Font.BOLD, 16));
		btnChangeDescription.setBounds(0, 90, 189, 35);
		panel.add(btnChangeDescription);
		
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub				
		String _textFieldName = textFieldName.getText().toUpperCase();
		int _textFieldPrice = Integer.parseInt(textFieldPrice.getText());
		int _textFieldMercID = Integer.parseInt(textFieldMercID.getText());
		Inventory inv = Inventory.getInstance();
		String actionCommand = e.getActionCommand();
		if(actionCommand.equals("Cancel")) {
			frame.dispose();
			superFrame.setEnabled(true);
			superFrame.toFront();
		}
		else if(actionCommand.equals("Change name")) {

			try {
				//invoke method(s) for modifying Merchandise here
				// Daniel can you add 3 buttons here and 3 different actionPerformed methods for them? will make it clearer and easier because only 1 parameter
				// i have tested all methods from main and they seem to work

				// what is the description jtextfield called?
				
				// how to throw exception when all textboxes empty?
//				if (_textFieldFName.isEmpty() && _textFieldPrice.isEmpty() && _textFieldMercID.) {
//					throw new Exception(); // ensures a first name, last name and address have been entered
//				}
				
				
				
				inv.modifyMedicationPrice(_textFieldMercID, _textFieldPrice); //just changing price for now, will do name+description once buttons present
//				p1.addPatient(_textFieldFName, _textFieldLName, _textFieldAddress, _textFieldPhoneNumber, _textFieldHCNumber, _textFieldDOB);
//				displayList(textAreaOutput, listOfPatientsInstance.getAllPatientsList());	//by invoking this method, the list is refreshed.
				
//				should we make addPatient() return a boolean to see if it was successful or not? what is the case it is not successful in?
				
				// aiza code in main below that she used to test methods (can delete once buttons work properly)
//				MerchandiseDAO m = new MerchandiseDAO();
//				ArrayList<Merchandise> list = m.getListOfMerchandise();
//				for (Merchandise mer : list) {
//					System.out.println(mer.toString());
//				}
//				
//				Merchandise med = list.get(0);
//				
//				Inventory i = Inventory.getInstance();
//				i.modifyMedicationDescription(3, "THIS IS A TEST DESCRIPTION");
//				
//				list = m.getListOfMerchandise();
//				for (Merchandise mer : list) {
//					System.out.println(mer.toString());
//				}
//				i.modifyMedicationPrice(1, 2000);
//				public boolean modifyMedicationPrice(int medicationID, int newPrice) {
				
			}
			catch(Exception ex) {
				JOptionPane.showMessageDialog(frame,"Name, type, form, and price are required", "Invalid input", JOptionPane.WARNING_MESSAGE);
			}
		}
	}	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		DisplayModifyMerchandise.displayModifyMerchandise(new JFrame());

	}
}
